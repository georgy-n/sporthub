encoding = "UTF-8"
style = IntelliJ
lineEndings = unix
maxColumn = 80
docstrings = ScalaDoc
importSelectors = singleLine
assumeStandardLibraryStripMargin = true
includeCurlyBraceInSelectChains = true
danglingParentheses = true
// Works in v1.6.0
//literals = {
//  long = upper
//  float = lower
//  double = lower
//}
project {
  git = false
  includeFilters = [
    ".*.scala$"
    ".*.sbt$"
    ".*.sc$"
  ]
  excludeFilters = []
}
indentOperator = akka
indentYieldKeyword = true
unindentTopLevelOperators = true
continuationIndent {
  callSite = 2
  extendSite = 2
  defnSite = 4
}
align {
  tokens = [
    {
      code = "←"
      owner = "Enumerator.Generator"
    }
    {
      code = "%"
      owner = "Term.ApplyInfix"
    }
    {
      code = "{"
      owner = Template
    }
    {
      code = "⇒"
      owner = Case
    }
    {
      code = extends
      owner = "Defn.(Class|Trait|Object)"
    }
    {
      code = "→"
      owner = "Term.ApplyInfix"
    }
    {
      code = "="
      owner = "(Enumerator.Val|Defn.(Va(l|r)|Def|Type))"
    }
    {
      code = "<-"
      owner = "Enumerator.Generator"
    }
    {
      code = "//"
      owner = ".*"
    }
    {
      code = "->"
      owner = "Term.ApplyInfix"
    }
    {
      code = "%%"
      owner = "Term.ApplyInfix"
    }
    {
      code = "=>"
      owner = Case
    }
    {
      code = "}"
      owner = Template
    }
    {
      code = "%%%"
      owner = "Term.ApplyInfix"
    }
  ]
  openParenCallSite = false
  openParenDefnSite = false
  arrowEnumeratorGenerator = false
  ifWhileOpenParen = false
}
newlines {
  alwaysBeforeMultilineDef = true
  neverInResultType = true
  //  neverInDanglingParenthesesSingleLineArgList = true // Works in v1.6.0
  alwaysBeforeTopLevelStatements = false
  sometimesBeforeColonInMethodReturnType = false
  penalizeSingleSelectMultiArgList = false
  alwaysBeforeElseAfterCurlyIf = false
  alwaysBeforeCurlyBraceLambdaParams = false
  afterCurlyLambda = never
}
// Works in v1.6.0
//verticalMultiline {
//  arityThreshold = 100
//  atDefnSite = true
//  newlineAfterOpenParen = true
//  newlineBeforeImplicitKW = true
//  newlineAfterImplicitKW = false
//  excludeDanglingParens = []
//}
spaces {
  afterKeywordBeforeParen = true
  // afterSymbolicDefs = false    // Works in v1.6.0
  afterTripleEquals = true
  inImportCurlyBraces = false
  beforeContextBoundColon = false
  inParentheses = false
  inByNameTypes = true
  neverAroundInfixTypes = []
}
binPack {
  literalArgumentLists = true
  literalsMinArgCount = 4
  parentConstructors = true
}
optIn {
  breakChainOnFirstMethodDot = true
  breaksInsideChains = false
  annotationNewlines = false
  blankLineBeforeDocstring = false
  selfAnnotationNewline = false
  configStyleArguments = false
}
rewrite {
  rules = [
    prefercurlyfors
    sortimports
    sortmodifiers
    redundantbraces
    redundantparens
  ]
  redundantBraces {
    maxLines = 100
    stringInterpolation = true
    includeUnitMethods = true
    methodBodies = true
  }
  //  tokens { // Works in v1.6.0
  //    "⇒": "=>"
  //    "←": "<-"
  //    "→": "->"
  //  }
  sortModifiers {
    order = [private, protected, final, implicit, sealed, abstract, override, lazy]
  }
}